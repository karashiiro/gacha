// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karashiiro/gacha/ent/drop"
	"github.com/karashiiro/gacha/ent/predicate"
)

// DropUpdate is the builder for updating Drop entities.
type DropUpdate struct {
	config
	hooks    []Hook
	mutation *DropMutation
}

// Where adds a new predicate for the DropUpdate builder.
func (du *DropUpdate) Where(ps ...predicate.Drop) *DropUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetRate sets the "rate" field.
func (du *DropUpdate) SetRate(f float32) *DropUpdate {
	du.mutation.ResetRate()
	du.mutation.SetRate(f)
	return du
}

// AddRate adds f to the "rate" field.
func (du *DropUpdate) AddRate(f float32) *DropUpdate {
	du.mutation.AddRate(f)
	return du
}

// SetSeries sets the "series" field.
func (du *DropUpdate) SetSeries(u uint32) *DropUpdate {
	du.mutation.ResetSeries()
	du.mutation.SetSeries(u)
	return du
}

// AddSeries adds u to the "series" field.
func (du *DropUpdate) AddSeries(u uint32) *DropUpdate {
	du.mutation.AddSeries(u)
	return du
}

// Mutation returns the DropMutation object of the builder.
func (du *DropUpdate) Mutation() *DropMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DropUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DropMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DropUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DropUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DropUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DropUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drop.Table,
			Columns: drop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: drop.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Rate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: drop.FieldRate,
		})
	}
	if value, ok := du.mutation.AddedRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: drop.FieldRate,
		})
	}
	if value, ok := du.mutation.Series(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: drop.FieldSeries,
		})
	}
	if value, ok := du.mutation.AddedSeries(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: drop.FieldSeries,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drop.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DropUpdateOne is the builder for updating a single Drop entity.
type DropUpdateOne struct {
	config
	hooks    []Hook
	mutation *DropMutation
}

// SetRate sets the "rate" field.
func (duo *DropUpdateOne) SetRate(f float32) *DropUpdateOne {
	duo.mutation.ResetRate()
	duo.mutation.SetRate(f)
	return duo
}

// AddRate adds f to the "rate" field.
func (duo *DropUpdateOne) AddRate(f float32) *DropUpdateOne {
	duo.mutation.AddRate(f)
	return duo
}

// SetSeries sets the "series" field.
func (duo *DropUpdateOne) SetSeries(u uint32) *DropUpdateOne {
	duo.mutation.ResetSeries()
	duo.mutation.SetSeries(u)
	return duo
}

// AddSeries adds u to the "series" field.
func (duo *DropUpdateOne) AddSeries(u uint32) *DropUpdateOne {
	duo.mutation.AddSeries(u)
	return duo
}

// Mutation returns the DropMutation object of the builder.
func (duo *DropUpdateOne) Mutation() *DropMutation {
	return duo.mutation
}

// Save executes the query and returns the updated Drop entity.
func (duo *DropUpdateOne) Save(ctx context.Context) (*Drop, error) {
	var (
		err  error
		node *Drop
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DropMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DropUpdateOne) SaveX(ctx context.Context) *Drop {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DropUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DropUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DropUpdateOne) sqlSave(ctx context.Context) (_node *Drop, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drop.Table,
			Columns: drop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: drop.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Drop.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Rate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: drop.FieldRate,
		})
	}
	if value, ok := duo.mutation.AddedRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: drop.FieldRate,
		})
	}
	if value, ok := duo.mutation.Series(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: drop.FieldSeries,
		})
	}
	if value, ok := duo.mutation.AddedSeries(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: drop.FieldSeries,
		})
	}
	_node = &Drop{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drop.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
