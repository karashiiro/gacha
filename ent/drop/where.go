// Code generated by entc, DO NOT EDIT.

package drop

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/karashiiro/gacha/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ObjectID applies equality check predicate on the "object_id" field. It's identical to ObjectIDEQ.
func ObjectID(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// SeriesID applies equality check predicate on the "series_id" field. It's identical to SeriesIDEQ.
func SeriesID(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeriesID), v))
	})
}

// ObjectIDEQ applies the EQ predicate on the "object_id" field.
func ObjectIDEQ(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDNEQ applies the NEQ predicate on the "object_id" field.
func ObjectIDNEQ(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjectID), v))
	})
}

// ObjectIDIn applies the In predicate on the "object_id" field.
func ObjectIDIn(vs ...uint32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObjectID), v...))
	})
}

// ObjectIDNotIn applies the NotIn predicate on the "object_id" field.
func ObjectIDNotIn(vs ...uint32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObjectID), v...))
	})
}

// ObjectIDGT applies the GT predicate on the "object_id" field.
func ObjectIDGT(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjectID), v))
	})
}

// ObjectIDGTE applies the GTE predicate on the "object_id" field.
func ObjectIDGTE(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjectID), v))
	})
}

// ObjectIDLT applies the LT predicate on the "object_id" field.
func ObjectIDLT(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjectID), v))
	})
}

// ObjectIDLTE applies the LTE predicate on the "object_id" field.
func ObjectIDLTE(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjectID), v))
	})
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRate), v))
	})
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRate), v...))
	})
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRate), v...))
	})
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRate), v))
	})
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRate), v))
	})
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRate), v))
	})
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRate), v))
	})
}

// SeriesIDEQ applies the EQ predicate on the "series_id" field.
func SeriesIDEQ(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeriesID), v))
	})
}

// SeriesIDNEQ applies the NEQ predicate on the "series_id" field.
func SeriesIDNEQ(v uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeriesID), v))
	})
}

// SeriesIDIn applies the In predicate on the "series_id" field.
func SeriesIDIn(vs ...uint32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeriesID), v...))
	})
}

// SeriesIDNotIn applies the NotIn predicate on the "series_id" field.
func SeriesIDNotIn(vs ...uint32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeriesID), v...))
	})
}

// HasSeries applies the HasEdge predicate on the "series" edge.
func HasSeries() predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SeriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeriesWith applies the HasEdge predicate on the "series" edge with a given conditions (other predicates).
func HasSeriesWith(preds ...predicate.Series) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SeriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Drop) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Drop) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Drop) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		p(s.Not())
	})
}
