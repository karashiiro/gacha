// Code generated by entc, DO NOT EDIT.

package drop

import (
	"entgo.io/ent/dialect/sql"
	"github.com/karashiiro/gacha/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// Series applies equality check predicate on the "series" field. It's identical to SeriesEQ.
func Series(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeries), v))
	})
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRate), v))
	})
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRate), v))
	})
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRate), v...))
	})
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float32) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRate), v...))
	})
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRate), v))
	})
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRate), v))
	})
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRate), v))
	})
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float32) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRate), v))
	})
}

// SeriesEQ applies the EQ predicate on the "series" field.
func SeriesEQ(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeries), v))
	})
}

// SeriesNEQ applies the NEQ predicate on the "series" field.
func SeriesNEQ(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeries), v))
	})
}

// SeriesIn applies the In predicate on the "series" field.
func SeriesIn(vs ...string) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeries), v...))
	})
}

// SeriesNotIn applies the NotIn predicate on the "series" field.
func SeriesNotIn(vs ...string) predicate.Drop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Drop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeries), v...))
	})
}

// SeriesGT applies the GT predicate on the "series" field.
func SeriesGT(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeries), v))
	})
}

// SeriesGTE applies the GTE predicate on the "series" field.
func SeriesGTE(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeries), v))
	})
}

// SeriesLT applies the LT predicate on the "series" field.
func SeriesLT(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeries), v))
	})
}

// SeriesLTE applies the LTE predicate on the "series" field.
func SeriesLTE(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeries), v))
	})
}

// SeriesContains applies the Contains predicate on the "series" field.
func SeriesContains(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSeries), v))
	})
}

// SeriesHasPrefix applies the HasPrefix predicate on the "series" field.
func SeriesHasPrefix(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSeries), v))
	})
}

// SeriesHasSuffix applies the HasSuffix predicate on the "series" field.
func SeriesHasSuffix(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSeries), v))
	})
}

// SeriesEqualFold applies the EqualFold predicate on the "series" field.
func SeriesEqualFold(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSeries), v))
	})
}

// SeriesContainsFold applies the ContainsFold predicate on the "series" field.
func SeriesContainsFold(v string) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSeries), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Drop) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Drop) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Drop) predicate.Drop {
	return predicate.Drop(func(s *sql.Selector) {
		p(s.Not())
	})
}
