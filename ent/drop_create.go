// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karashiiro/gacha/ent/drop"
	"github.com/karashiiro/gacha/ent/series"
)

// DropCreate is the builder for creating a Drop entity.
type DropCreate struct {
	config
	mutation *DropMutation
	hooks    []Hook
}

// SetObjectID sets the "object_id" field.
func (dc *DropCreate) SetObjectID(u uint32) *DropCreate {
	dc.mutation.SetObjectID(u)
	return dc
}

// SetRate sets the "rate" field.
func (dc *DropCreate) SetRate(f float32) *DropCreate {
	dc.mutation.SetRate(f)
	return dc
}

// SetSeriesID sets the "series_id" field.
func (dc *DropCreate) SetSeriesID(u uint32) *DropCreate {
	dc.mutation.SetSeriesID(u)
	return dc
}

// SetID sets the "id" field.
func (dc *DropCreate) SetID(u uint32) *DropCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetSeries sets the "series" edge to the Series entity.
func (dc *DropCreate) SetSeries(s *Series) *DropCreate {
	return dc.SetSeriesID(s.ID)
}

// Mutation returns the DropMutation object of the builder.
func (dc *DropCreate) Mutation() *DropMutation {
	return dc.mutation
}

// Save creates the Drop in the database.
func (dc *DropCreate) Save(ctx context.Context) (*Drop, error) {
	var (
		err  error
		node *Drop
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DropMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DropCreate) SaveX(ctx context.Context) *Drop {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dc *DropCreate) check() error {
	if _, ok := dc.mutation.ObjectID(); !ok {
		return &ValidationError{Name: "object_id", err: errors.New("ent: missing required field \"object_id\"")}
	}
	if _, ok := dc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New("ent: missing required field \"rate\"")}
	}
	if _, ok := dc.mutation.SeriesID(); !ok {
		return &ValidationError{Name: "series_id", err: errors.New("ent: missing required field \"series_id\"")}
	}
	if _, ok := dc.mutation.SeriesID(); !ok {
		return &ValidationError{Name: "series", err: errors.New("ent: missing required edge \"series\"")}
	}
	return nil
}

func (dc *DropCreate) sqlSave(ctx context.Context) (*Drop, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (dc *DropCreate) createSpec() (*Drop, *sqlgraph.CreateSpec) {
	var (
		_node = &Drop{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: drop.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: drop.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.ObjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: drop.FieldObjectID,
		})
		_node.ObjectID = value
	}
	if value, ok := dc.mutation.Rate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: drop.FieldRate,
		})
		_node.Rate = value
	}
	if nodes := dc.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drop.SeriesTable,
			Columns: []string{drop.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: series.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SeriesID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DropCreateBulk is the builder for creating many Drop entities in bulk.
type DropCreateBulk struct {
	config
	builders []*DropCreate
}

// Save creates the Drop entities in the database.
func (dcb *DropCreateBulk) Save(ctx context.Context) ([]*Drop, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Drop, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DropMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DropCreateBulk) SaveX(ctx context.Context) []*Drop {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
