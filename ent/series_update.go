// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karashiiro/gacha/ent/drop"
	"github.com/karashiiro/gacha/ent/predicate"
	"github.com/karashiiro/gacha/ent/series"
)

// SeriesUpdate is the builder for updating Series entities.
type SeriesUpdate struct {
	config
	hooks    []Hook
	mutation *SeriesMutation
}

// Where adds a new predicate for the SeriesUpdate builder.
func (su *SeriesUpdate) Where(ps ...predicate.Series) *SeriesUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetName sets the "name" field.
func (su *SeriesUpdate) SetName(s string) *SeriesUpdate {
	su.mutation.SetName(s)
	return su
}

// AddDropIDs adds the "drops" edge to the Drop entity by IDs.
func (su *SeriesUpdate) AddDropIDs(ids ...uint32) *SeriesUpdate {
	su.mutation.AddDropIDs(ids...)
	return su
}

// AddDrops adds the "drops" edges to the Drop entity.
func (su *SeriesUpdate) AddDrops(d ...*Drop) *SeriesUpdate {
	ids := make([]uint32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDropIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (su *SeriesUpdate) Mutation() *SeriesMutation {
	return su.mutation
}

// ClearDrops clears all "drops" edges to the Drop entity.
func (su *SeriesUpdate) ClearDrops() *SeriesUpdate {
	su.mutation.ClearDrops()
	return su
}

// RemoveDropIDs removes the "drops" edge to Drop entities by IDs.
func (su *SeriesUpdate) RemoveDropIDs(ids ...uint32) *SeriesUpdate {
	su.mutation.RemoveDropIDs(ids...)
	return su
}

// RemoveDrops removes "drops" edges to Drop entities.
func (su *SeriesUpdate) RemoveDrops(d ...*Drop) *SeriesUpdate {
	ids := make([]uint32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDropIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeriesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeriesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeriesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeriesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeriesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SeriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   series.Table,
			Columns: series.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: series.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: series.FieldName,
		})
	}
	if su.mutation.DropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.DropsTable,
			Columns: []string{series.DropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: drop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDropsIDs(); len(nodes) > 0 && !su.mutation.DropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.DropsTable,
			Columns: []string{series.DropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: drop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DropsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.DropsTable,
			Columns: []string{series.DropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: drop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{series.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SeriesUpdateOne is the builder for updating a single Series entity.
type SeriesUpdateOne struct {
	config
	hooks    []Hook
	mutation *SeriesMutation
}

// SetName sets the "name" field.
func (suo *SeriesUpdateOne) SetName(s string) *SeriesUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// AddDropIDs adds the "drops" edge to the Drop entity by IDs.
func (suo *SeriesUpdateOne) AddDropIDs(ids ...uint32) *SeriesUpdateOne {
	suo.mutation.AddDropIDs(ids...)
	return suo
}

// AddDrops adds the "drops" edges to the Drop entity.
func (suo *SeriesUpdateOne) AddDrops(d ...*Drop) *SeriesUpdateOne {
	ids := make([]uint32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDropIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (suo *SeriesUpdateOne) Mutation() *SeriesMutation {
	return suo.mutation
}

// ClearDrops clears all "drops" edges to the Drop entity.
func (suo *SeriesUpdateOne) ClearDrops() *SeriesUpdateOne {
	suo.mutation.ClearDrops()
	return suo
}

// RemoveDropIDs removes the "drops" edge to Drop entities by IDs.
func (suo *SeriesUpdateOne) RemoveDropIDs(ids ...uint32) *SeriesUpdateOne {
	suo.mutation.RemoveDropIDs(ids...)
	return suo
}

// RemoveDrops removes "drops" edges to Drop entities.
func (suo *SeriesUpdateOne) RemoveDrops(d ...*Drop) *SeriesUpdateOne {
	ids := make([]uint32, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDropIDs(ids...)
}

// Save executes the query and returns the updated Series entity.
func (suo *SeriesUpdateOne) Save(ctx context.Context) (*Series, error) {
	var (
		err  error
		node *Series
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SeriesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeriesUpdateOne) SaveX(ctx context.Context) *Series {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeriesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeriesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SeriesUpdateOne) sqlSave(ctx context.Context) (_node *Series, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   series.Table,
			Columns: series.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: series.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Series.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: series.FieldName,
		})
	}
	if suo.mutation.DropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.DropsTable,
			Columns: []string{series.DropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: drop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDropsIDs(); len(nodes) > 0 && !suo.mutation.DropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.DropsTable,
			Columns: []string{series.DropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: drop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DropsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.DropsTable,
			Columns: []string{series.DropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: drop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Series{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{series.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
